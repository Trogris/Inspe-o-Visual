#!/usr/bin/env python3
"""
Sistema de Verifica√ß√£o Visual Automatizada
Interface Streamlit - Vers√£o Funcional Corrigida
"""

import streamlit as st
import cv2
import numpy as np
import pandas as pd
from datetime import datetime
import tempfile
import os
import json
from typing import Dict, List, Optional, Tuple
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Importar m√≥dulos do sistema
try:
    from video_processor import VideoProcessor
    from radar_detector import RadarEquipmentDetector
    from checklist_generator import ChecklistGenerator
    from data_storage import DataStorage
except ImportError as e:
    st.error(f"Erro ao importar m√≥dulos: {e}")
    st.stop()

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Sistema de Verifica√ß√£o Visual",
    page_icon="üîç",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS para interface limpa
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        padding: 1.5rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin-bottom: 2rem;
    }
    
    .status-approved {
        background-color: #d4edda;
        color: #155724;
        padding: 1rem;
        border-radius: 8px;
        border-left: 4px solid #28a745;
        font-weight: bold;
        font-size: 1.2em;
        text-align: center;
        margin: 1rem 0;
    }
    
    .status-review {
        background-color: #f8d7da;
        color: #721c24;
        padding: 1rem;
        border-radius: 8px;
        border-left: 4px solid #dc3545;
        font-weight: bold;
        font-size: 1.2em;
        text-align: center;
        margin: 1rem 0;
    }
    
    .component-critical {
        background-color: #fff3cd;
        padding: 0.5rem;
        border-radius: 4px;
        border-left: 3px solid #ffc107;
        margin: 0.2rem 0;
    }
    
    .component-optional {
        background-color: #e2e3e5;
        padding: 0.5rem;
        border-radius: 4px;
        border-left: 3px solid #6c757d;
        margin: 0.2rem 0;
    }
    
    .upload-success {
        background-color: #d4edda;
        color: #155724;
        padding: 1rem;
        border-radius: 8px;
        border-left: 4px solid #28a745;
        margin: 1rem 0;
    }
    
    .stButton > button {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        border-radius: 8px;
        padding: 0.75rem 2rem;
        font-weight: bold;
        width: 100%;
    }
    
    .stButton > button:hover {
        background: linear-gradient(90deg, #5a6fd8 0%, #6a4190 100%);
        border: none;
    }
</style>
""", unsafe_allow_html=True)

def initialize_session_state():
    """Inicializa vari√°veis de sess√£o"""
    if 'video_processor' not in st.session_state:
        st.session_state.video_processor = VideoProcessor()
    
    if 'radar_detector' not in st.session_state:
        st.session_state.radar_detector = RadarEquipmentDetector()
    
    if 'checklist_generator' not in st.session_state:
        st.session_state.checklist_generator = ChecklistGenerator()
    
    if 'data_storage' not in st.session_state:
        st.session_state.data_storage = DataStorage()
    
    if 'current_video' not in st.session_state:
        st.session_state.current_video = None
    
    if 'extracted_frames' not in st.session_state:
        st.session_state.extracted_frames = []
    
    if 'frame_analyses' not in st.session_state:
        st.session_state.frame_analyses = []
    
    if 'consolidated_checklist' not in st.session_state:
        st.session_state.consolidated_checklist = None
    
    if 'analysis_complete' not in st.session_state:
        st.session_state.analysis_complete = False

def render_header():
    """Renderiza cabe√ßalho da aplica√ß√£o"""
    st.markdown("""
    <div class="main-header">
        <h1>Sistema de Verifica√ß√£o Visual Automatizada</h1>
        <p>An√°lise inteligente de equipamentos com IA</p>
    </div>
    """, unsafe_allow_html=True)

def render_sidebar():
    """Renderiza barra lateral com configura√ß√µes"""
    st.sidebar.header("Configura√ß√£o da Inspe√ß√£o")
    
    # Informa√ß√µes do operador
    operator_name = st.sidebar.text_input(
        "Nome do T√©cnico",
        value="",
        placeholder="Digite o nome do t√©cnico"
    )
    
    op_number = st.sidebar.text_input(
        "N√∫mero da OP",
        value="",
        placeholder="Ex: OP-2025-001"
    )
    
    st.sidebar.markdown("---")
    
    # Componentes monitorados
    st.sidebar.subheader("Componentes Monitorados")
    
    st.sidebar.markdown("**Cr√≠ticos:**")
    critical_components = [
        "Etiqueta vis√≠vel",
        "Tampa encaixada", 
        "Parafusos presentes",
        "Conectores instalados",
        "C√¢meras"
    ]
    
    for component in critical_components:
        st.sidebar.markdown(f'<div class="component-critical">{component}</div>', 
                          unsafe_allow_html=True)
    
    st.sidebar.markdown("**Opcionais:**")
    optional_components = [
        "Cabeamento",
        "Suportes"
    ]
    
    for component in optional_components:
        st.sidebar.markdown(f'<div class="component-optional">{component}</div>', 
                          unsafe_allow_html=True)
    
    st.sidebar.markdown("---")
    
    # Estat√≠sticas
    st.sidebar.subheader("Estat√≠sticas")
    try:
        stats = st.session_state.data_storage.get_statistics()
        
        col1, col2 = st.sidebar.columns(2)
        with col1:
            st.metric("Total", stats.get('total_inspections', 0))
        with col2:
            approval_rate = stats.get('approval_rate', 0)
            st.metric("Aprova√ß√£o", f"{approval_rate:.1f}%")
    except:
        st.sidebar.write("Estat√≠sticas n√£o dispon√≠veis")
    
    return operator_name, op_number

def render_video_upload():
    """Renderiza √°rea de upload de v√≠deo"""
    st.subheader("Upload do V√≠deo")
    
    uploaded_file = st.file_uploader(
        "Selecione o v√≠deo do equipamento finalizado",
        type=['mp4', 'mov', 'avi', 'mkv', 'wmv'],
        help="Arraste o arquivo ou clique para selecionar"
    )
    
    if uploaded_file is not None:
        # Validar arquivo
        if st.session_state.video_processor.validate_video_file(uploaded_file):
            st.markdown(f"""
            <div class="upload-success">
                ‚úÖ V√≠deo carregado com sucesso: <strong>{uploaded_file.name}</strong>
            </div>
            """, unsafe_allow_html=True)
            
            st.session_state.current_video = uploaded_file
            return uploaded_file
        else:
            st.error("Arquivo de v√≠deo inv√°lido ou muito grande (m√°ximo 200MB)")
    
    return None

def render_analysis_section(uploaded_file, operator_name, op_number):
    """Renderiza se√ß√£o de an√°lise"""
    if uploaded_file is None:
        st.info("üì§ Fa√ßa upload de um v√≠deo para iniciar a an√°lise")
        return
    
    if not operator_name or not op_number:
        st.warning("‚ö†Ô∏è Preencha o nome do t√©cnico e n√∫mero da OP na barra lateral")
        return
    
    st.subheader("An√°lise do V√≠deo")
    
    # Bot√£o para iniciar an√°lise
    if st.button("üîç Analisar V√≠deo", type="primary"):
        analyze_video(uploaded_file, operator_name, op_number)
    
    # Mostrar resultados se an√°lise foi conclu√≠da
    if st.session_state.analysis_complete:
        render_analysis_results()

def analyze_video(uploaded_file, operator_name, op_number):
    """Executa an√°lise completa do v√≠deo"""
    try:
        # Container para progresso
        progress_container = st.container()
        
        with progress_container:
            # Barra de progresso (valores entre 0.0 e 1.0)
            progress_bar = st.progress(0.0)
            status_text = st.empty()
            
            # Passo 1: Extrair frames
            status_text.text("üé¨ Extraindo frames do v√≠deo...")
            progress_bar.progress(0.2)
            
            frames = st.session_state.video_processor.extract_frames_from_video(uploaded_file, num_frames=10)
            
            if not frames:
                st.error("‚ùå Falha na extra√ß√£o de frames. Verifique se o v√≠deo est√° correto.")
                progress_bar.empty()
                status_text.empty()
                return
            
            st.session_state.extracted_frames = frames
            
            # Passo 2: Carregar modelo IA
            status_text.text("ü§ñ Carregando modelo de IA...")
            progress_bar.progress(0.4)
            
            st.session_state.radar_detector.load_model()
            
            # Passo 3: Analisar frames
            status_text.text("üîç Analisando frames com IA...")
            progress_bar.progress(0.6)
            
            analyses = []
            for i, frame in enumerate(frames):
                analysis = st.session_state.radar_detector.analyze_frame(frame)
                analyses.append(analysis)
                # Progresso entre 0.6 e 0.8
                current_progress = 0.6 + (i + 1) * 0.2 / len(frames)
                progress_bar.progress(current_progress)
            
            st.session_state.frame_analyses = analyses
            
            # Passo 4: Gerar checklist consolidado
            status_text.text("üìã Gerando checklist consolidado...")
            progress_bar.progress(0.9)
            
            video_info = {
                'filename': uploaded_file.name,
                'size_mb': uploaded_file.size / (1024 * 1024)
            }
            
            operator_info = {
                'operator_name': operator_name,
                'op_number': op_number
            }
            
            consolidated = st.session_state.checklist_generator.generate_consolidated_checklist(
                analyses, video_info, operator_info
            )
            
            st.session_state.consolidated_checklist = consolidated
            
            # Passo 5: Finalizar
            status_text.text("‚úÖ An√°lise conclu√≠da!")
            progress_bar.progress(1.0)
            
            st.session_state.analysis_complete = True
            
            # Limpar barra de progresso
            import time
            time.sleep(1)
            progress_bar.empty()
            status_text.empty()
        
        st.success("üéâ An√°lise conclu√≠da com sucesso!")
        st.rerun()
        
    except Exception as e:
        st.error(f"‚ùå Erro durante an√°lise: {str(e)}")
        logger.error(f"Erro na an√°lise: {e}")

def render_analysis_results():
    """Renderiza resultados da an√°lise"""
    if not st.session_state.consolidated_checklist:
        return
    
    checklist = st.session_state.consolidated_checklist
    
    st.subheader("Resultados da An√°lise")
    
    # Decis√£o final
    decision = checklist['summary']['final_decision']
    score = checklist['summary']['overall_score']
    
    if decision == "LIBERAR_LACRE":
        st.markdown(f"""
        <div class="status-approved">
            ‚úÖ LIBERAR LACRE<br>
            Equipamento aprovado com score: {score:.1f}%
        </div>
        """, unsafe_allow_html=True)
    else:
        st.markdown(f"""
        <div class="status-review">
            ‚ö†Ô∏è REVISAR EQUIPAMENTO<br>
            Equipamento precisa de revis√£o. Score: {score:.1f}%
        </div>
        """, unsafe_allow_html=True)
    
    # Resumo dos componentes
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("Componentes Cr√≠ticos")
        for component, data in checklist['components_analysis'].items():
            if data.get('critical', False):
                status = "‚úÖ" if data['detected'] else "‚ùå"
                confidence = data.get('confidence', 0)
                st.write(f"{status} **{component.replace('_', ' ').title()}**: {confidence:.1f}%")
    
    with col2:
        st.subheader("Componentes Opcionais")
        for component, data in checklist['components_analysis'].items():
            if not data.get('critical', True):
                status = "‚úÖ" if data['detected'] else "‚ùå"
                confidence = data.get('confidence', 0)
                st.write(f"{status} **{component.replace('_', ' ').title()}**: {confidence:.1f}%")
    
    # An√°lise frame-by-frame
    st.subheader("An√°lise Frame-by-Frame")
    
    if st.session_state.extracted_frames:
        frame_options = [f"Frame {i+1}" for i in range(len(st.session_state.extracted_frames))]
        selected_frame_idx = st.selectbox("Selecione um frame:", range(len(frame_options)), 
                                        format_func=lambda x: frame_options[x])
        
        if selected_frame_idx is not None:
            frame = st.session_state.extracted_frames[selected_frame_idx]
            analysis = st.session_state.frame_analyses[selected_frame_idx]
            
            # Desenhar bounding boxes
            annotated_frame = st.session_state.checklist_generator.draw_bounding_boxes(frame, analysis)
            
            col1, col2 = st.columns([2, 1])
            
            with col1:
                st.image(annotated_frame, caption=f"Frame {selected_frame_idx + 1} com detec√ß√µes", 
                        use_column_width=True)
            
            with col2:
                st.subheader(f"Checklist Frame {selected_frame_idx + 1}")
                frame_checklist = st.session_state.checklist_generator.generate_frame_checklist(
                    selected_frame_idx + 1, analysis
                )
                
                for item in frame_checklist['items']:
                    status = "‚úÖ" if item['detected'] else "‚ùå"
                    st.write(f"{status} **{item['component']}**: {item['confidence']:.1f}%")
    
    # A√ß√µes finais
    st.subheader("A√ß√µes")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üíæ Salvar Inspe√ß√£o"):
            save_inspection()
    
    with col2:
        if st.button("üìÑ Download Checklist"):
            download_checklist()
    
    with col3:
        if st.button("üîÑ Nova An√°lise"):
            reset_analysis()

def save_inspection():
    """Salva inspe√ß√£o no banco de dados"""
    try:
        if not st.session_state.consolidated_checklist:
            st.error("Nenhuma an√°lise para salvar")
            return
        
        checklist = st.session_state.consolidated_checklist
        
        inspection_data = {
            'main': {
                'op_number': checklist['inspection_info']['op_number'],
                'operator_name': checklist['inspection_info']['operator_name'],
                'equipment_code': f"EQ-{datetime.now().strftime('%Y%m%d%H%M%S')}",
                'final_status': checklist['summary']['final_decision'],
                'video_filename': checklist['inspection_info']['video_filename'],
                'total_frames': len(st.session_state.extracted_frames),
                'average_score': checklist['summary']['overall_score']
            },
            'consolidated_checklist': checklist
        }
        
        inspection_id = st.session_state.data_storage.save_inspection(inspection_data)
        
        if inspection_id:
            st.success(f"‚úÖ Inspe√ß√£o salva com ID: {inspection_id}")
        else:
            st.error("‚ùå Falha ao salvar inspe√ß√£o")
            
    except Exception as e:
        st.error(f"‚ùå Erro ao salvar: {str(e)}")

def download_checklist():
    """Gera download do checklist"""
    try:
        if not st.session_state.consolidated_checklist:
            st.error("Nenhum checklist para download")
            return
        
        report_text = st.session_state.checklist_generator.format_checklist_for_display(
            st.session_state.consolidated_checklist
        )
        
        st.download_button(
            label="üì• Baixar Relat√≥rio",
            data=report_text,
            file_name=f"checklist_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
            mime="text/plain"
        )
        
    except Exception as e:
        st.error(f"‚ùå Erro ao gerar download: {str(e)}")

def reset_analysis():
    """Reseta an√°lise para nova inspe√ß√£o"""
    st.session_state.current_video = None
    st.session_state.extracted_frames = []
    st.session_state.frame_analyses = []
    st.session_state.consolidated_checklist = None
    st.session_state.analysis_complete = False
    st.rerun()

def main():
    """Fun√ß√£o principal da aplica√ß√£o"""
    # Inicializar estado da sess√£o
    initialize_session_state()
    
    # Renderizar interface
    render_header()
    
    # Barra lateral
    operator_name, op_number = render_sidebar()
    
    # Conte√∫do principal
    uploaded_file = render_video_upload()
    
    # Se√ß√£o de an√°lise
    render_analysis_section(uploaded_file, operator_name, op_number)

if __name__ == "__main__":
    main()

